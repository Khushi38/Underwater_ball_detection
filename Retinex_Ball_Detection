import numpy as np
import cv2
sigma_list= [15, 80, 250]
G= 5.0
b=25.0
alpha=125.0
beta=46.0,
low_clip=0.01
high_clip=0.99

def singleScaleRetinex(img, sigma):

    retinex = np.log10(img) - np.log10(cv2.GaussianBlur(img, (0, 0), sigma))

    return retinex

def multiScaleRetinex(img, sigma_list):

    retinex = np.zeros_like(img)
    for sigma in sigma_list:
        retinex += singleScaleRetinex(img, sigma)

    retinex = retinex / len(sigma_list)

    return retinex

def colorRestoration(img, alpha, beta):

    img_sum = np.sum(img, axis=2, keepdims=True)

    color_restoration = beta * (np.log10(alpha * img) - np.log10(img_sum))

    return color_restoration

def simplestColorBalance(img, low_clip, high_clip):    

    total = img.shape[0] * img.shape[1]
    for i in range(img.shape[2]):
        unique, counts = np.unique(img[:, :, i], return_counts=True)
        current = 0
        for u, c in zip(unique, counts):            
            if float(current) / total < low_clip:
                low_val = u
            if float(current) / total < high_clip:
                high_val = u
            current += c
                
        img[:, :, i] = np.maximum(np.minimum(img[:, :, i], high_val), low_val)

    return img    

def MSRCR(img, sigma_list, G, b, alpha, beta, low_clip, high_clip):

    img = np.float64(img) + 1.0

    img_retinex = multiScaleRetinex(img, sigma_list)    
    img_color = colorRestoration(img, alpha, beta)    
    img_msrcr = G * (img_retinex * img_color + b)

    for i in range(img_msrcr.shape[2]):
        img_msrcr[:, :, i] = (img_msrcr[:, :, i] - np.min(img_msrcr[:, :, i])) / \
                             (np.max(img_msrcr[:, :, i]) - np.min(img_msrcr[:, :, i])) * \
                             255
    
    img_msrcr = np.uint8(np.minimum(np.maximum(img_msrcr, 0), 255))
    img_msrcr = simplestColorBalance(img_msrcr, low_clip, high_clip)       

    return img_msrcr

def automatedMSRCR(img, sigma_list):

    img = np.float64(img) + 1.0

    img_retinex = multiScaleRetinex(img, sigma_list)

    for i in range(img_retinex.shape[2]):
        unique, count = np.unique(np.int32(img_retinex[:, :, i] * 100), return_counts=True)
        for u, c in zip(unique, count):
            if u == 0:
                zero_count = c
                break
            
        low_val = unique[0] / 100.0
        high_val = unique[-1] / 100.0
        for u, c in zip(unique, count):
            if u < 0 and c < zero_count * 0.1:
                low_val = u / 100.0
            if u > 0 and c < zero_count * 0.1:
                high_val = u / 100.0
                break
            
        img_retinex[:, :, i] = np.maximum(np.minimum(img_retinex[:, :, i], high_val), low_val)
        
        img_retinex[:, :, i] = (img_retinex[:, :, i] - np.min(img_retinex[:, :, i])) / \
                               (np.max(img_retinex[:, :, i]) - np.min(img_retinex[:, :, i])) \
                               * 255

    img_retinex = np.uint8(img_retinex)
        
    return img_retinex

def MSRCP(img, sigma_list, low_clip, high_clip):

    img = np.float64(img) + 1.0

    intensity = np.sum(img, axis=2) / img.shape[2]    

    retinex = multiScaleRetinex(intensity, sigma_list)

    intensity = np.expand_dims(intensity, 2)
    retinex = np.expand_dims(retinex, 2)

    intensity1 = simplestColorBalance(retinex, low_clip, high_clip)

    intensity1 = (intensity1 - np.min(intensity1)) / \
                 (np.max(intensity1) - np.min(intensity1)) * \
                 255.0 + 1.0

    img_msrcp = np.zeros_like(img)
    
    for y in range(img_msrcp.shape[0]):
        for x in range(img_msrcp.shape[1]):
            B = np.max(img[y, x])
            A = np.minimum(256.0 / B, intensity1[y, x, 0] / intensity[y, x, 0])
            img_msrcp[y, x, 0] = A * img[y, x, 0]
            img_msrcp[y, x, 1] = A * img[y, x, 1]
            img_msrcp[y, x, 2] = A * img[y, x, 2]

    img_msrcp = np.uint8(img_msrcp - 1.0)

    return img_msrcp
    
 import math
import cv2
import numpy as np
import matplotlib.pyplot as plt
import time
def cameraTest():
    x = 0
    y = 0
    cap = cv2.VideoCapture(r'C:\Users\Welcome\Desktop\outputk.avi')
    #a = time.time()
    # Read until video is completed
    while(cap.isOpened()):
      # Capture frame-by-frame
      ret, img = cap.read()
      if ret == True:
        

        
        img_msrcr =MSRCR(img,sigma_list,G,b,alpha,beta,low_clip,high_clip)

        img_amsrcr =automatedMSRCR(img,sigma_list)

        img3 = MSRCP(img,sigma_list,low_clip,high_clip)    
        print(img3.shape)
        #cv2.imshow('result',img3)

#         im = np.zeros((img.shape[0],img.shape[1]),dtype = int)
#         im = 0.6*img[:,:,0] + 0.2*img[:,:,1] + 0.2*img[:,:,2]
#         im = cv2.normalize(im.astype(int), None, 255,0, cv2.NORM_MINMAX, cv2.CV_8UC1)
#         #applying sharpnening
#         kernel_sharpening = np.array([[-1,-1,-1], 
#                                   [-1, 9,-1],
#                                   [-1,-1,-1]])
        
#         sharpened = cv2.filter2D(im, -1, kernel_sharpening)
#         #applying blur
#         img3 = cv2.medianBlur(sharpened,5)
#         img3 = cv2.medianBlur(img3,15,3)
        
        img3 = cv2.Canny(img3,70,70)
        #detecting circles
        circles = cv2.HoughCircles(img3, cv2.HOUGH_GRADIENT, 2,1800)
        
        if circles is None:
            continue
        c = circles[0]
        x=circles[0][0][0]
        y=circles[0][0][1]
        
        circles = np.uint16(np.around(circles))
        for i in circles[0,:]:
            #draw the outer circle
            cv2.circle(img3,(i[0],i[1]),i[2],(255,255,255),5)
            #draw the center of the circle
            cv2.circle(img3,(i[0],i[1]),2,(255,255,255),3)
            cv2.imshow('result',img3)
#         if time.time()-a > 10 :
#             break
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

      else: 
        break

    cap.release()
    cv2.destroyAllWindows()
    return(x,y)
    
 cameraTest()  
